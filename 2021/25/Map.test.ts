import Map, { POINT } from "./Map";

describe("Map", () => {
  it("works lmao", () => {
    const input = [
      [".", ".", ".", ">", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ">"],
      ["v", ".", ".", ".", ".", ".", ">"],
      [".", ".", ".", ".", ".", ".", ">"],
      [".", ".", ".", ".", ".", ".", "."],
      [".", ".", "v", "v", "v", ".", "."],
    ];

    const endState = [
      [">", ".", ".", ".", ".", ".", "."],
      [".", ".", "v", ".", ".", ".", "."],
      [".", ".", ">", ".", "v", ".", "."],
      [".", ">", ".", "v", ".", ".", "."],
      [".", ".", ".", ">", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", "."],
      ["v", ".", ".", ".", ".", ".", "."],
    ];

    const map = new Map(input as unknown as POINT[][]);

    map.step();
    map.step();
    map.step();
    map.step();

    expect(map.getCurrentState()).toEqual(endState);
  });

  it("works again lmao", () => {
    const input = [
      ["v", ".", ".", ".", ">", ">", ".", "v", "v", ">"],
      [".", "v", "v", ">", ">", ".", "v", "v", ".", "."],
      [">", ">", ".", ">", "v", ">", ".", ".", ".", "v"],
      [">", ">", "v", ">", ">", ".", ">", ".", "v", "."],
      ["v", ">", "v", ".", "v", "v", ".", "v", ".", "."],
      [">", ".", ">", ">", ".", ".", "v", ".", ".", "."],
      [".", "v", "v", ".", ".", ">", ".", ">", "v", "."],
      ["v", ".", "v", ".", ".", ">", ">", "v", ".", "v"],
      [".", ".", ".", ".", "v", ".", ".", "v", ".", ">"],
    ];

    const endState = [
      [".", ".", ">", ">", "v", ">", "v", "v", ".", "."],
      [".", ".", "v", ".", ">", ">", "v", "v", ".", "."],
      [".", ".", ">", ">", "v", ">", ">", "v", "v", "."],
      [".", ".", ">", ">", ">", ">", ">", "v", "v", "."],
      ["v", ".", ".", ".", ".", ".", ".", ">", "v", "v"],
      ["v", ">", "v", ".", ".", ".", ".", ">", ">", "v"],
      ["v", "v", "v", ".", ".", ".", ".", ".", ">", ">"],
      [">", "v", "v", ".", ".", ".", ".", ".", ".", ">"],
      [".", ">", "v", ".", "v", "v", ".", "v", ".", "."],
    ];

    const map = new Map(input as unknown as POINT[][]);

    let stepCount = 0;
    stepCount++;
    while (map.step() !== 0) {
      // console.log(
      //   map
      //     .getCurrentState()
      //     .map((line) => line.join(""))
      //     .join("\n")
      // );
      stepCount++;
    }

    expect(stepCount).toEqual(58);
    expect(map.getCurrentState()).toEqual(endState);
  });
});
